resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result <- ks_test_resampling(circum_9, "circum_9")
ks_result <- ks_test_resampling(size_9, "circum_9")
ks_result <- ks_test_resampling(ratio_9, "circum_9")
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 1000) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.0005,0.0005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data, replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result <- ks_test_resampling(circum_9, "circum_9")
ks_result <- ks_test_resampling(size_9, "circum_9")
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 1000) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.0005,0.0005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data+runif(length(circum_9),-0.0005,0.0005), replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result <- ks_test_resampling(circum_9, "circum_9")
ks_result <- ks_test_resampling(size_9, "circum_9")
ks_result <- ks_test_resampling(ratio_9, "circum_9")
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 100) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.0005,0.0005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data+runif(length(circum_9),-0.0005,0.0005), replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result <- ks_test_resampling(circum_9, "circum_9")
ks_result <- ks_test_resampling(size_9, "circum_9")
ks_result <- ks_test_resampling(ratio_9, "circum_9")
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 100) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.0005,0.0005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data+runif(length(circum_9),-0.0005,0.0005), replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result_1 <- ks_test_resampling(circum_9, "circum_9")
ks_result_2 <- ks_test_resampling(size_9, "circum_9")
ks_result_3 <- ks_test_resampling(ratio_9, "circum_9")
View(data_list)
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 100) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.0005,0.0005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data+runif(length(circum_9),-0.0005,0.0005), replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result_1 <- ks_test_resampling(circum_9, "circum_9")
ks_result_2 <- ks_test_resampling(size_9, "circum_9")
ks_result_3 <- ks_test_resampling(ratio_9, "circum_9")
library(boot)
library(e1071)
skewness(circum_9)
skewness(size_9)
skewness(ratio_9)
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 100) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.005,0.005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data+runif(length(circum_9),-0.005,0.005), replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result_1 <- ks_test_resampling(circum_9, "circum_9")
ks_result_2 <- ks_test_resampling(size_9, "circum_9")
ks_result_3 <- ks_test_resampling(ratio_9, "circum_9")
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 100) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.005,0.005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data+runif(length(circum_9),-0.5,0.5), replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result_1 <- ks_test_resampling(circum_9, "circum_9")
ks_result_2 <- ks_test_resampling(size_9, "circum_9")
ks_result_3 <- ks_test_resampling(ratio_9, "circum_9")
# Function to perform KS test with resampling
ks_test_resampling <- function(data, variable, n_resamples = 100) {
observed_statistic <- ks.test(data+runif(length(circum_9),-0.005,0.005), "pnorm")$statistic
resample_statistics <- replicate(n_resamples, {
sampled_data <- sample(data+runif(length(circum_9),-5,5), replace = TRUE)
ks.test(sampled_data, "pnorm")$statistic
})
p_value <- mean(resample_statistics >= observed_statistic)
return(list(
observed_statistic = observed_statistic,
resample_statistics = resample_statistics,
p_value = p_value
))
}
# Perform KS test with resampling on circum_9
ks_result_1 <- ks_test_resampling(circum_9, "circum_9")
ks_result_2 <- ks_test_resampling(size_9, "circum_9")
ks_result_3 <- ks_test_resampling(ratio_9, "circum_9")
# Perform KS test with resampling on circum_9
ks_result_1 <- ks.test(circum_9, "pnorm")
ks_result_2 <- ks.test(size_9, "pnorm")
ks_result_3 <- ks.test(ratio_9, "pnorm")
# Perform KS test with resampling on circum_9
ks_result_1 <- ks.test(gitter(circum_9), "pnorm")
# Perform KS test with resampling on circum_9
ks_result_1 <- ks.test(jitter(circum_9), "pnorm")
ks_result_2 <- ks.test(jitter(size_9), "pnorm")
ks_result_3 <- ks.test(jitter(ratio_9), "pnorm")
View(ks_result_1)
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(resampled_skewness >= original_skewness)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(abs(resampled_skewness) >= 0.05)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(abs(resampled_skewness) >= 0.1)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(abs(resampled_skewness) >= 0.2)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(abs(resampled_skewness) <= 0.2)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(abs(resampled_skewness) <= 0.5)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(abs(resampled_skewness) <= 0.25)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to perform bootstrap resampling and calculate skewness
bootstrap_skewness <- function(x, n_resamples = 1000) {
set.seed(123)  # Set a seed for reproducibility
original_skewness <- calculate_skewness(x)
resampled_skewness <- replicate(n_resamples, {
resampled_data <- sample(x, replace = TRUE)
calculate_skewness(resampled_data)
})
p_value <- mean(resampled_skewness >= original_skewness)
return(list(original_skewness = original_skewness, p_value = p_value))
}
# Perform bootstrap skewness tests
circum_9_result <- bootstrap_skewness(circum_9)
size_9_result <- bootstrap_skewness(size_9)
ratio_9_result <- bootstrap_skewness(ratio_9)
# Display the results
circum_9_result
size_9_result
ratio_9_result
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to calculate skewness
skewness_func <- function(x) {
skewness_val <- skewness(x)
return(skewness_val)
}
# Set the number of bootstrap replicates
num_replicates <- 1000
# Perform bootstrapping for circum_9
circum_9_boot <- boot(circum_9, skewness_func, R = num_replicates)
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to calculate skewness
skewness_func <- function(data, indices) {
sampled_data <- data[indices]
skewness_val <- skewness(sampled_data)
return(skewness_val)
}
# Set the number of bootstrap replicates
num_replicates <- 1000
# Perform bootstrapping for circum_9
circum_9_boot <- boot(circum_9, skewness_func, R = num_replicates)
circum_9_ci <- boot.ci(circum_9_boot, type = "bca")
# Perform bootstrapping for size_9
size_9_boot <- boot(size_9, skewness_func, R = num_replicates)
size_9_ci <- boot.ci(size_9_boot, type = "bca")
# Perform bootstrapping for ratio_9
ratio_9_boot <- boot(ratio_9, skewness_func, R = num_replicates)
ratio_9_ci <- boot.ci(ratio_9_boot, type = "bca")
# Display the results
print("Circum_9 Skewness:")
summary(circum_9_boot)
circum_9_ci
print("Size_9 Skewness:")
summary(size_9_boot)
size_9_ci
print("Ratio_9 Skewness:")
summary(ratio_9_boot)
ratio_9_ci
library(boot)
library(e1071)
calculate_skewness <- function(x) {
skewness_value <- skewness(x)
return(skewness_value)
}
# Define a function to calculate skewness
skewness_func <- function(data, indices) {
sampled_data <- data[indices]
skewness_val <- skewness(sampled_data)
return(skewness_val)
}
# Set the number of bootstrap replicates
num_replicates <- 1000
# Perform bootstrapping for circum_9
circum_9_boot <- boot(circum_9, skewness_func, R = num_replicates)
circum_9_ci <- boot.ci(circum_9_boot, type = "bca")
# Perform bootstrapping for size_9
size_9_boot <- boot(size_9, skewness_func, R = num_replicates)
size_9_ci <- boot.ci(size_9_boot, type = "bca")
# Perform bootstrapping for ratio_9
ratio_9_boot <- boot(ratio_9, skewness_func, R = num_replicates)
ratio_9_ci <- boot.ci(ratio_9_boot, type = "bca")
# Display the results
print("Circum_9 Skewness:")
skewness(circum_9)
circum_9_ci
print("Size_9 Skewness:")
skewness(size_9)
size_9_ci
print("Ratio_9 Skewness:")
skewness(ratio_9)
ratio_9_ci
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(MASS)
library(dplyr)
high_pred_conf1 <- read.csv("0-0.1-500.csv")
high_pred_conf2 <- read.csv("0.9-1-500.csv")
med_pred_conf <- read.csv("0.3-0.7-158.csv")
# Combine the three datasets
combined_data <- rbind(high_pred_conf1, high_pred_conf2, med_pred_conf)
# Sample 100 points from each column
sampled_data <- combined_data %>%
group_by(pred_prob) %>%
sample_n(100, replace = TRUE)
# Plot scattered plots using ggplot2
ggplot(sampled_data, aes(x = pred_prob, y = circum)) +
geom_point() +
labs(title = "Scattered Plot of Columns with respect to pred_prob")
ggplot(combined_data, aes(x = num_size)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of size")
ggplot(sampled_data, aes(x = num_size)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of size")
View(combined_data)
ggplot(combined_data, aes(x = num_size)) +
geom_histogram(binwidth = 0.0001, fill = "skyblue", color = "black") +
labs(title = "Histogram of size")
ggplot(sampled_data, aes(x = num_size)) +
geom_histogram(binwidth = 0.0001, fill = "skyblue", color = "black") +
labs(title = "Histogram of size")
ggplot(combined_data, aes(x = num_size)) +
geom_histogram(binwidth = 0.01, fill = "skyblue", color = "black") +
labs(title = "Histogram of size")
ggplot(sampled_data, aes(x = num_size)) +
geom_histogram(binwidth = 0.01, fill = "skyblue", color = "black") +
labs(title = "Histogram of size")
high_pred_conf1<-read.csv("sampled_high_pred_conf1.csv")
high_pred_conf2<-read.csv("sampled_high_pred_conf2.csv")
n_samples<-150
med_pred_conf<-med_pred_conf[sample(nrow(med_pred_conf), n_samples), ]
# Function to calculate mean circum difference
mean_diff <- function(data1, data2, indices) {
mean_circum_diff <- mean(data1$circum[indices]) - mean(data2$circum[indices])
return(mean_circum_diff)
}
# Perform bootstrap resampling
bootstrap_circum_results <- boot(data = high_pred_conf1, statistic = mean_diff, R = 1000, data2 = high_pred_conf2)
# Plot the bootstrap distribution
hist(bootstrap_circum_results$t, main = "Bootstrap Distribution of Mean Circum Difference", xlab = "Mean Circum Difference")
# Function to calculate mean size difference
mean_diff <- function(data1, data2, indices) {
mean_circum_diff <- mean(data1$num_size[indices]) - mean(data2$num_size[indices])
return(mean_circum_diff)
}
# Perform bootstrap resampling
bootstrap_size_results <- boot(data = high_pred_conf1, statistic = mean_diff, R = 1000, data2 = high_pred_conf2)
# Plot the bootstrap distribution
hist(bootstrap_size_results$t, main = "Bootstrap Distribution of Mean Size Difference", xlab = "Mean Size Difference")
# Calculate p-value
p_value <- mean(bootstrap_circum_results$t > 0)
cat("P-value:", p_value, "\n")
p_value <- mean(bootstrap_size_results$t > 0)
cat("P-value:", p_value, "\n")
